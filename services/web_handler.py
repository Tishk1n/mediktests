import asyncio
from playwright.async_api import async_playwright, TimeoutError, Page, Browser
from aiogram.types import FSInputFile
import os
import subprocess
import logging
import urllib.parse

logging.basicConfig(level=logging.INFO,
                   format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class WebHandler:
    def __init__(self, bot_instance=None, user_id=None):
        self.base_url = "http://selftest-mpe.mededtech.ru"
        self.bot = bot_instance
        self.user_id = user_id
        self.browser: Browser = None
        self.context = None
        self.answers_url = "https://www.tests-exam.ru/vopros.html?id_test=719&id_vopros=25565"
        self.answer_page: Page = None
        self._ensure_playwright_browsers()

    def _ensure_playwright_browsers(self):
        try:
            if not os.path.exists(os.path.expanduser('~/.cache/ms-playwright')):
                logger.info("üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤ Playwright...")
                subprocess.run(['playwright', 'install', 'chromium'], check=True)
                logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤: {e}")
            raise

    async def _init_browser(self):
        if not self.browser:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
            p = await async_playwright().start()
            self.browser = await p.chromium.launch(
                headless=True,
                args=['--no-sandbox', '--disable-dev-shm-usage']
            )
            self.context = await self.browser.new_context(
                viewport={'width': 1920, 'height': 1080},
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            )
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    async def close(self):
        if self.context:
            await self.context.close()
        if self.browser:
            await self.browser.close()

    async def _send_error_screenshot(self, screenshot_path: str, error_message: str):
        if self.bot and self.user_id:
            try:
                photo = FSInputFile(screenshot_path)
                await self.bot.send_photo(
                    chat_id=self.user_id,
                    photo=photo,
                    caption=f"‚ùå {error_message}"
                )
                os.remove(screenshot_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

    async def _send_info_screenshot(self, screenshot_path: str, message: str):
        if self.bot and self.user_id:
            try:
                photo = FSInputFile(screenshot_path)
                await self.bot.send_photo(
                    chat_id=self.user_id,
                    photo=photo,
                    caption=f"‚ÑπÔ∏è {message}"
                )
                os.remove(screenshot_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
    
    async def login(self, login: str, password: str):
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        try:
            await self._init_browser()
            page = await self.context.new_page()
            page.set_default_timeout(60000)
            
            # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ fmza.ru
            steps = [
                ("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç fmza.ru", 
                 lambda: page.goto("https://fmza.ru", wait_until="networkidle")),
                
                ("–ü–æ–∏—Å–∫ '–ü–µ—Ä–≤–∏—á–Ω–∞—è –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è'", 
                 lambda: page.wait_for_selector('a:has-text("–ü–µ—Ä–≤–∏—á–Ω–∞—è –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è (–°–ü–û)")')),
                ("–ö–ª–∏–∫ –ø–æ '–ü–µ—Ä–≤–∏—á–Ω–∞—è –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è'", 
                 lambda: page.click('a:has-text("–ü–µ—Ä–≤–∏—á–Ω–∞—è –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è (–°–ü–û)")')),
                
                ("–ü–æ–∏—Å–∫ '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –°–ü–û'",
                 lambda: page.wait_for_selector('a:has-text("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –°–ü–û")')),
                ("–ö–ª–∏–∫ –ø–æ '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –°–ü–û'",
                 lambda: page.click('a:has-text("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –°–ü–û")')),
            ]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            for step_name, step_action in steps:
                try:
                    logger.info(f"üîÑ {step_name}...")
                    await step_action()
                    await page.wait_for_load_state("networkidle")
                    
                    # –î–µ–ª–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
                    screenshot_path = f"step_{step_name.lower().replace(' ', '_')}.png"
                    await page.screenshot(path=screenshot_path)
                    await self._send_info_screenshot(
                        screenshot_path,
                        f"–®–∞–≥: {step_name} - —É—Å–ø–µ—à–Ω–æ"
                    )
                    
                    logger.info(f"‚úÖ {step_name} - —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    error_path = f"error_{step_name.lower().replace(' ', '_')}.png"
                    await page.screenshot(path=error_path)
                    await self._send_error_screenshot(
                        error_path,
                        f"–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ '{step_name}': {str(e)}"
                    )
                    raise

            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —Å–∞–π—Ç –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            try:
                logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
                await page.goto(self.base_url, wait_until="networkidle")
                logger.info("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

                logger.info("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                await page.wait_for_selector('input[name="j_username"]')
                logger.info("üîÑ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                
                await page.fill('input[name="j_username"]', login)
                await page.fill('input[name="j_password"]', password)
                
                await page.screenshot(path="before_login.png")
                await self._send_info_screenshot(
                    "before_login.png",
                    "–§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥..."
                )
                
                await page.click('input.login-button[type="submit"]')
                await page.wait_for_load_state("networkidle")
                
                await page.screenshot(path="after_login.png")
                await self._send_info_screenshot(
                    "after_login.png",
                    "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
                )
                
                return page

            except Exception as e:
                error_path = "error_auth.png"
                await page.screenshot(path=error_path)
                await self._send_error_screenshot(
                    error_path,
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
                )
                raise
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            await self.close()
            raise

    async def start_test(self, page):
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞...")
            await page.wait_for_load_state("networkidle")
            
            # –®–∞–≥ 1: –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
            logger.info("üîÑ –ò—â–µ–º –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'...")
            await page.wait_for_timeout(2000)  # –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
            await page.screenshot(path="before_start_button.png")
            await self._send_info_screenshot(
                "before_start_button.png",
                "–ò—â–µ–º –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'"
            )
            
            await page.click('#dijit_form_Button_0_label')
            await page.wait_for_load_state("networkidle")
            logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' –Ω–∞–∂–∞—Ç–∞")
            
            # –®–∞–≥ 2: –í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            logger.info("üîÑ –í—ã–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å...")
            await page.wait_for_timeout(2000)
            await page.screenshot(path="specialty_selection.png")
            await self._send_info_screenshot(
                "specialty_selection.png",
                "–í—ã–±–∏—Ä–∞–µ–º '–§–∞—Ä–º–∞—Ü–∏—è, 2025'"
            )
            
            await page.click('span.extraSpace:has-text("–§–∞—Ä–º–∞—Ü–∏—è, 2025")')
            await page.wait_for_load_state("networkidle")
            logger.info("‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞")
            
            # –®–∞–≥ 3: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
            logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É...")
            await page.wait_for_timeout(2000)
            await page.screenshot(path="before_first_question.png")
            await self._send_info_screenshot(
                "before_first_question.png",
                "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"
            )
            
            await page.click('#xsltforms-subform-0-label-2_2_6_4_2_')
            await page.wait_for_load_state("networkidle")
            logger.info("‚úÖ –¢–µ—Å—Ç –Ω–∞—á–∞—Ç")
            
            return page
            
        except Exception as e:
            error_path = "error_start_test.png"
            await page.screenshot(path=error_path)
            await self._send_error_screenshot(
                error_path,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ—Å—Ç–∞: {str(e)}"
            )
            raise
    
    async def parse_answer(self, question_text: str):
        if not self.answer_page:
            self.answer_page = await self.browser.new_page()
        
        await self.answer_page.goto("https://www.tests-exam.ru/search.html?sea="+urllib.parse.quote_plus(question_text))
        # –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—Ç–≤–µ—Ç–æ–º
        await self.answer_page.click('//div[@class="b"]/a[@href]')
        
        return (await self.answer_page.locator('//*[@id="prav_id"]').text_content()).strip()
    
    async def get_answer(self, page: Page, question_text: str) -> str | None:
        try:
            logger.info("üîÑ –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π —Ç–µ–∫—Å—Ç–∞
            options = await page.locator(".question_options>tbody>tr").all()
            
            if not options:
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤")
                return None
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            options_cleaned = {}
            
            for i, option in enumerate(options, start=1):
                # 1st td > 2nd div > 1st div > 1st div
                handle = option.locator(
                    "td:nth-child(1) > div:nth-child(2) > div:nth-child(1) > div:nth-child(1)").first
                
                # 3rd td > 1st span > 1st span > 1st span > p
                text = await option.locator(
                    "td:nth-child(3) > span:nth-child(1) > span:nth-child(1) > span:nth-child(1) > p").first.text_content()
                
                print(f"–í–∞—Ä–∏–∞–Ω—Ç {i}:")
                options_cleaned[text] = handle
                print(text)
                print("-" * 40)
            
            await page.screenshot(path="question_options.png")
            await self._send_info_screenshot(
                "question_options.png",
                f"–í–æ–ø—Ä–æ—Å: {question_text}\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n" + "\n".join(options_cleaned.keys())
            )
            
            correct_answer = await self.parse_answer(question_text)
            print(correct_answer)
            
            if correct_answer:
                await self.bot.send_message(
                    self.user_id,
                    f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{correct_answer}"
                )
                return correct_answer
            
            return None
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
            await page.screenshot(path="error_get_answer.png")
            await self._send_error_screenshot(
                "error_get_answer.png",
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
            )
            return None

    async def process_test(self, page, test_url: str):
        try:
            logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Ç–µ—Å—Ç...")
            await page.goto(test_url)
            await page.wait_for_load_state("networkidle")
            await page.wait_for_timeout(2000)  # –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
            
            await page.screenshot(path="before_list.png")
            await self._send_info_screenshot(
                "before_list.png",
                "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤..."
            )
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–ö —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤" —Å –Ω–æ–≤—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º
            try:
                list_button = await page.wait_for_selector(
                    'button span#xsltforms-subform-0-label-2_2_2_6_2_10_4_2_',
                    timeout=10000
                )
                if list_button:
                    await list_button.click()
                else:
                    logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ '–ö —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    raise Exception("–ö–Ω–æ–ø–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞: {e}")
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
                try:
                    await page.evaluate('''() => {
                        const buttons = Array.from(document.querySelectorAll('button'));
                        const listButton = buttons.find(b => b.textContent.includes('–ö —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤'));
                        if (listButton) listButton.click();
                    }''')
                except Exception as e2:
                    logger.error(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")
                    raise
            
            await page.wait_for_load_state("networkidle")
            await page.wait_for_timeout(2000)
            
            await page.screenshot(path="questions_list.png")
            await self._send_info_screenshot(
                "questions_list.png",
                "–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–∫—Ä—ã—Ç"
            )
            
            # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–∞
            correct_answers = 0
            current_question = 80

            while current_question > 0:
                logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ {current_question}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å –Ω–æ–≤—ã–º XPath —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º
                try:
                    question_element = await page.wait_for_selector('//*[@id="xsltforms-subform-0-output-14_4_2_"]/span/span/p')
                    question_text = await question_element.inner_text()
                    if not question_text:
                        logger.error("‚ùå –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø—É—Å—Ç")
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
                    
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞: {question_text[:100]}...")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞: {e}")
                    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    await page.screenshot(path=f"error_question_{current_question}.png")
                    await self._send_error_screenshot(
                        f"error_question_{current_question}.png",
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ {current_question}"
                    )
                    raise

                await page.screenshot(path=f"question_{current_question}.png")
                await self._send_info_screenshot(
                    f"question_{current_question}.png",
                    f"–í–æ–ø—Ä–æ—Å {current_question}:\n{question_text[:100]}..."
                )

                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                correct_answer = await self.get_answer(page, question_text)
                
                if correct_answer:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ—Å—Ç–∞
                    await page.goto(test_url)
                    await page.wait_for_load_state("networkidle")
                    
                    # –ò—â–µ–º –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
                    answers = await page.query_selector_all('.testRadioButton')
                    for answer in answers:
                        answer_text = await answer.evaluate('el => el.closest("tr").textContent')
                        if correct_answer in answer_text:
                            await answer.click()
                            correct_answers += 1
                            break
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                await page.click('#xsltforms-subform-4-label-2_2_2_2_2_10_4_2_')
                current_question -= 1
                await page.wait_for_load_state("networkidle")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ—à–µ–Ω –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
                is_answered = await page.evaluate('''() => {
                    return document.querySelector('.fa-check-circle') !== null;
                }''')
                
                if is_answered:
                    logger.info("‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç —É–∂–µ —Ä–µ—à–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
                    break

            return {
                "correct": correct_answers,
                "total": 80 - current_question,
                "percentage": round((correct_answers / (80 - current_question)) * 100, 2)
            }

        except Exception as e:
            error_path = "error_processing_test.png"
            await page.screenshot(path=error_path)
            await self._send_error_screenshot(
                error_path,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {str(e)}"
            )
            raise
