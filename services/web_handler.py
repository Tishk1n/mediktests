import asyncio
from playwright.async_api import async_playwright, TimeoutError
from aiogram.types import FSInputFile
import os
import subprocess
import logging

logging.basicConfig(level=logging.INFO,
                   format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class WebHandler:
    def __init__(self, bot_instance=None, user_id=None):
        self.base_url = "http://selftest-mpe.mededtech.ru"
        self.bot = bot_instance
        self.user_id = user_id
        self._ensure_playwright_browsers()
    
    def _ensure_playwright_browsers(self):
        try:
            if not os.path.exists(os.path.expanduser('~/.cache/ms-playwright')):
                logger.info("üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤ Playwright...")
                subprocess.run(['playwright', 'install', 'chromium'], check=True)
                logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤: {e}")
            raise

    async def _send_error_screenshot(self, screenshot_path: str, error_message: str):
        if self.bot and self.user_id:
            try:
                photo = FSInputFile(screenshot_path)
                await self.bot.send_photo(
                    chat_id=self.user_id,
                    photo=photo,
                    caption=f"‚ùå {error_message}"
                )
                os.remove(screenshot_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

    async def _send_info_screenshot(self, screenshot_path: str, message: str):
        if self.bot and self.user_id:
            try:
                photo = FSInputFile(screenshot_path)
                await self.bot.send_photo(
                    chat_id=self.user_id,
                    photo=photo,
                    caption=f"‚ÑπÔ∏è {message}"
                )
                os.remove(screenshot_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
    
    async def login(self, login: str, password: str):
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        async with async_playwright() as p:
            try:
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
                browser = await p.chromium.launch(
                    headless=True,
                    args=['--no-sandbox', '--disable-dev-shm-usage']
                )
                logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                context = await browser.new_context(
                    viewport={'width': 1920, 'height': 1080},
                    user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                )
                page = await context.new_page()
                page.set_default_timeout(60000)
                
                # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ fmza.ru
                steps = [
                    ("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç fmza.ru", 
                     lambda: page.goto("https://fmza.ru", wait_until="networkidle")),
                    
                    ("–ü–æ–∏—Å–∫ '–ü–µ—Ä–≤–∏—á–Ω–∞—è –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è'", 
                     lambda: page.wait_for_selector('a:has-text("–ü–µ—Ä–≤–∏—á–Ω–∞—è –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è (–°–ü–û)")')),
                    ("–ö–ª–∏–∫ –ø–æ '–ü–µ—Ä–≤–∏—á–Ω–∞—è –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è'", 
                     lambda: page.click('a:has-text("–ü–µ—Ä–≤–∏—á–Ω–∞—è –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è (–°–ü–û)")')),
                    
                    ("–ü–æ–∏—Å–∫ '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –°–ü–û'",
                     lambda: page.wait_for_selector('a:has-text("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –°–ü–û")')),
                    ("–ö–ª–∏–∫ –ø–æ '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –°–ü–û'",
                     lambda: page.click('a:has-text("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –°–ü–û")')),
                ]
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                for step_name, step_action in steps:
                    try:
                        logger.info(f"üîÑ {step_name}...")
                        await step_action()
                        await page.wait_for_load_state("networkidle")
                        
                        # –î–µ–ª–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
                        screenshot_path = f"step_{step_name.lower().replace(' ', '_')}.png"
                        await page.screenshot(path=screenshot_path)
                        await self._send_info_screenshot(
                            screenshot_path,
                            f"–®–∞–≥: {step_name} - —É—Å–ø–µ—à–Ω–æ"
                        )
                        
                        logger.info(f"‚úÖ {step_name} - —É—Å–ø–µ—à–Ω–æ")
                    except Exception as e:
                        error_path = f"error_{step_name.lower().replace(' ', '_')}.png"
                        await page.screenshot(path=error_path)
                        await self._send_error_screenshot(
                            error_path,
                            f"–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ '{step_name}': {str(e)}"
                        )
                        raise

                # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —Å–∞–π—Ç –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                try:
                    logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
                    await page.goto(self.base_url, wait_until="networkidle")
                    logger.info("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

                    logger.info("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                    await page.wait_for_selector('input[name="j_username"]')
                    logger.info("üîÑ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    await page.fill('input[name="j_username"]', login)
                    await page.fill('input[name="j_password"]', password)
                    
                    # –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
                    await page.screenshot(path="before_login.png")
                    await self._send_info_screenshot(
                        "before_login.png",
                        "–§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥..."
                    )
                    
                    await page.click('input.login-button[type="submit"]')

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    try:
                        await page.wait_for_selector('.user-menu', timeout=5000)
                        # –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                        await page.screenshot(path="login_success.png")
                        await self._send_info_screenshot(
                            "login_success.png",
                            "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
                        )
                        return page
                    except TimeoutError:
                        logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞")
                        error_path = "error_auth_failed.png"
                        await page.screenshot(path=error_path)
                        await self._send_error_screenshot(
                            error_path,
                            "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
                        )
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")

                except Exception as e:
                    error_path = "error_auth.png"
                    await page.screenshot(path=error_path)
                    await self._send_error_screenshot(
                        error_path,
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
                    )
                    raise
                    
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                if 'browser' in locals():
                    await browser.close()
                raise

    async def start_test(self, page):
        await page.click("text=–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        await page.click("text=–§–∞—Ä–º–∞—Ü–∏—è, 2025")
        await page.click("text=–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É")
        return page

    async def process_test(self, page):
        correct_answers = 0
        total_questions = 60
        
        for _ in range(total_questions):
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ –∫–æ–¥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            answer_element = await page.query_selector('[data-correct="true"]')
            if answer_element:
                await answer_element.click()
                correct_answers += 1
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            next_button = await page.query_selector('button:has-text("–î–∞–ª–µ–µ")')
            if next_button:
                await next_button.click()
            await page.wait_for_timeout(1000)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        
        return {
            "correct": correct_answers,
            "total": total_questions,
            "percentage": round((correct_answers / total_questions) * 100, 2)
        }
