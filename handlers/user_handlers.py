from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.markdown import hbold
from database.sqlite import Database
from keyboards.reply import get_main_keyboard, get_settings_keyboard
from utils.test_utils import start_testing_process

router = Router()

class UserAuth(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()
    waiting_for_test_url = State()

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, db: Database):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    credentials = db.get_user_credentials(message.from_user.id)
    
    if credentials:
        await message.answer(
            "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –æ—Ç —Å–∞–π—Ç–∞ selftest-mpe.medtech.ru:"
        )
        await state.set_state(UserAuth.waiting_for_login)

@router.message(UserAuth.waiting_for_login)
async def process_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(UserAuth.waiting_for_password)

@router.message(UserAuth.waiting_for_password)
async def process_password(message: Message, state: FSMContext, db: Database):
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º
    data = await state.get_data()
    login = data.get("login")
    password = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    db.save_user_credentials(message.from_user.id, login, password)
    
    await message.answer(
        "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    await state.clear()

@router.callback_query(F.data == "start_test")
async def start_test(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—á–∞—Ç—ã–π —Ç–µ—Å—Ç:"
    )
    await state.set_state(UserAuth.waiting_for_test_url)

@router.message(UserAuth.waiting_for_test_url)
async def process_test_url(message: Message, state: FSMContext, db: Database):
    await state.clear()
    await message.answer(
        "üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ"
    )
    
    result = await start_testing_process(
        user_id=message.from_user.id,
        db=db,
        bot=message.bot,
        test_url=message.text
    )
    
    if "error" in result:
        await message.answer(
            f"‚ùå {result['error']}",
            reply_markup=get_main_keyboard()
        )
        return
    
    await message.answer(
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {result['correct']}/{result['total']}\n"
        f"–ü—Ä–æ—Ü–µ–Ω—Ç: {result['percentage']}%",
        reply_markup=get_main_keyboard()
    )

@router.callback_query(F.data == "show_stats")
async def show_statistics(callback: CallbackQuery, db: Database):
    stats = db.get_user_statistics(callback.from_user.id)
    
    text = (
        f"üìä {hbold('–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')}\n\n"
        f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {stats['total_tests']}\n"
        f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats['average_score']}%\n"
        f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['best_score']}%\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç: {stats['last_test_date']}"
    )
    
    await callback.message.edit_text(text, reply_markup=get_main_keyboard())

@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        "- –ò–∑–º–µ–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "- –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
        reply_markup=get_settings_keyboard()
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/help - –ü–æ–º–æ—â—å"
    )
