from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.markdown import hbold
from database.sqlite import Database
from keyboards.reply import get_main_keyboard, get_settings_keyboard, get_admin_keyboard, get_subscription_keyboard
from utils.test_utils import start_testing_process
from config import load_config
from datetime import datetime, timedelta
from utils.subscription import format_subscription_type

router = Router()

class UserAuth(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()
    waiting_for_test_url = State()
    waiting_for_payment_screenshot = State()

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, db: Database):
    config = load_config()
    is_admin = message.from_user.id in config.tg_bot.admin_ids
    
    if is_admin:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    subscription = db.get_subscription_details(message.from_user.id)
    credentials = db.get_user_credentials(message.from_user.id)
    
    if not subscription["active"]:
        # –î–∞–µ–º –¥–µ–º–æ-–¥–æ—Å—Ç—É–ø –Ω–∞ 30 –º–∏–Ω—É—Ç
        db.add_subscription(message.from_user.id, 0.0208333, "demo")
        subscription = db.get_subscription_details(message.from_user.id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    time_left = subscription["time_left"]
    if time_left:
        if time_left.days > 0:
            time_str = f"{time_left.days} {'–¥–µ–Ω—å' if time_left.days == 1 else '–¥–Ω–µ–π'}"
        else:
            hours = time_left.seconds // 3600
            minutes = (time_left.seconds % 3600) // 60
            time_str = f"{hours}—á {minutes}–º"
    else:
        time_str = "–∏—Å—Ç–µ–∫–ª–∞"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}!\n\n"
        f"üí´ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:\n"
        f"–¢–∏–ø: {format_subscription_type(subscription['type']) if subscription['type'] else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        f"–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {time_str}\n"
        f"–î–∞–Ω–Ω—ã–µ –æ—Ç FMZA: {'‚úÖ' if credentials else '‚ùå'}\n"
    )
    
    if not credentials:
        message_text += "\n‚ö†Ô∏è –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."
    
    await message.answer(
        message_text,
        reply_markup=get_main_keyboard()
    )
    
    if not credentials:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –æ—Ç —Å–∞–π—Ç–∞ selftest-mpe.medtech.ru:"
        )
        await state.set_state(UserAuth.waiting_for_login)

@router.message(UserAuth.waiting_for_login)
async def process_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(UserAuth.waiting_for_password)

@router.message(UserAuth.waiting_for_password)
async def process_password(message: Message, state: FSMContext, db: Database):
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º
    data = await state.get_data()
    login = data.get("login")
    password = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    db.save_user_credentials(message.from_user.id, login, password)
    
    await message.answer(
        "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    await state.clear()

@router.callback_query(F.data == "start_test")
async def start_test(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—á–∞—Ç—ã–π —Ç–µ—Å—Ç:"
    )
    await state.set_state(UserAuth.waiting_for_test_url)

@router.message(UserAuth.waiting_for_test_url)
async def process_test_url(message: Message, state: FSMContext, db: Database):
    await state.clear()
    await message.answer(
        "üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ"
    )
    
    result = await start_testing_process(
        user_id=message.from_user.id,
        db=db,
        bot=message.bot,
        test_url=message.text
    )
    
    if "error" in result:
        await message.answer(
            f"‚ùå {result['error']}",
            reply_markup=get_main_keyboard()
        )
        return
    
    await message.answer(
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {result['correct']}/{result['total']}\n"
        f"–ü—Ä–æ—Ü–µ–Ω—Ç: {result['percentage']}%",
        reply_markup=get_main_keyboard()
    )

@router.callback_query(F.data == "show_stats")
async def show_statistics(callback: CallbackQuery, db: Database):
    stats = db.get_user_statistics(callback.from_user.id)
    
    text = (
        f"üìä {hbold('–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')}\n\n"
        f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {stats['total_tests']}\n"
        f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats['average_score']}%\n"
        f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['best_score']}%\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç: {stats['last_test_date']}"
    )
    
    await callback.message.edit_text(text, reply_markup=get_main_keyboard())

@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        "- –ò–∑–º–µ–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "- –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
        reply_markup=get_settings_keyboard()
    )

@router.callback_query(F.data == "buy_subscription")
async def show_subscription_plans(callback: CallbackQuery):
    await callback.message.edit_text(
        "üí´ –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        "‚Ä¢ 1 –î–µ–Ω—å - 100‚ÇΩ\n"
        "‚Ä¢ 7 –î–Ω–µ–π - 500‚ÇΩ\n"
        "‚Ä¢ 1 –ú–µ—Å—è—Ü - 1000‚ÇΩ\n\n"
        "‚ú® –ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞",
        reply_markup=get_subscription_keyboard()
    )

@router.callback_query(F.data.startswith("buy_"))
async def process_subscription_purchase(callback: CallbackQuery, db: Database):
    duration = callback.data.replace("buy_", "")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    prices = {"1_day": 100, "7_days": 500, "30_days": 1000}
    days = {"1_day": 1, "7_days": 7, "30_days": 30}
    
    if duration not in prices:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∫–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    requisites = db.get_requisites()
    if not requisites or not any(requisites):
        await callback.message.edit_text(
            "‚ùå –û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_keyboard()
        )
        return
    
    card_number, sbp, bank, holder = requisites
    text = (
        f"üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {days[duration]} {'–¥–µ–Ω—å' if days[duration] == 1 else '–¥–Ω–µ–π'}\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {prices[duration]}‚ÇΩ\n\n"
        f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
        f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {card_number}\n"
        f"–°–ë–ü: {sbp}\n"
        f"–ë–∞–Ω–∫: {bank}\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {holder}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞."
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{duration}")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="buy_subscription")]
        ])
    )

@router.callback_query(F.data.startswith("confirm_"))
async def confirm_payment(callback: CallbackQuery, state: FSMContext):
    duration = callback.data.split("_")[1]
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ duration –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if not duration.endswith("_day") and not duration.endswith("_days"):
        duration = f"{duration}_days" if duration != "1" else "1_day"
    
    await state.update_data(subscription_duration=duration)
    await callback.message.edit_text(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ"
    )
    await state.set_state(UserAuth.waiting_for_payment_screenshot)

@router.message(UserAuth.waiting_for_payment_screenshot)
async def process_payment_screenshot(message: Message, state: FSMContext, db: Database):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        return
    
    data = await state.get_data()
    duration = data.get("subscription_duration")
    await state.clear()
    
    config = load_config()
    admin_id = config.tg_bot.admin_ids[0]
    
    subscription_data = f"{message.from_user.id}_{duration}"  # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
    
    await message.bot.send_photo(
        admin_id,
        message.photo[-1].file_id,
        caption=(
            f"üí´ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏\n"
            f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.username or '–ë–µ–∑ username'} ({message.from_user.id})\n"
            f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {duration}"
        ),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"approve_{subscription_data}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"reject_{message.from_user.id}"
                )
            ]
        ])
    )
    
    await message.answer(
        "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.",
        reply_markup=get_main_keyboard()
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/help - –ü–æ–º–æ—â—å"
    )
