from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hbold
from database.sqlite import Database
from keyboards.reply import get_admin_keyboard, get_requisites_keyboard
from utils.subscription import format_subscription_type

router = Router()

class RequisitesStates(StatesGroup):
    waiting_for_card = State()
    waiting_for_sbp = State()
    waiting_for_bank = State()
    waiting_for_holder = State()

@router.callback_query(F.data == "requisites")
async def show_requisites(callback: CallbackQuery, db: Database):
    card_number, sbp, bank, holder = db.get_requisites()
    text = (
        f"{hbold('üí≥ –¢–µ–∫—É—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:')}\n\n"
        f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {card_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–°–ë–ü: {sbp or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–ë–∞–Ω–∫: {bank or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {holder or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
    )
    await callback.message.edit_text(
        text,
        reply_markup=get_requisites_keyboard()
    )

@router.callback_query(F.data == "change_requisites")
async def change_requisites_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:",
        reply_markup=None
    )
    await state.set_state(RequisitesStates.waiting_for_card)

@router.message(RequisitesStates.waiting_for_card)
async def process_card(message: Message, state: FSMContext):
    await state.update_data(card=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –°–ë–ü:")
    await state.set_state(RequisitesStates.waiting_for_sbp)

@router.message(RequisitesStates.waiting_for_sbp)
async def process_sbp(message: Message, state: FSMContext):
    await state.update_data(sbp=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:")
    await state.set_state(RequisitesStates.waiting_for_bank)

@router.message(RequisitesStates.waiting_for_bank)
async def process_bank(message: Message, state: FSMContext):
    await state.update_data(bank=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    await state.set_state(RequisitesStates.waiting_for_holder)

@router.message(RequisitesStates.waiting_for_holder)
async def process_holder(message: Message, state: FSMContext, db: Database):
    data = await state.get_data()
    db.save_requisites(
        card_number=data['card'],
        sbp=data['sbp'],
        bank=data['bank'],
        holder_name=message.text
    )
    await state.clear()
    await message.answer(
        "‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(F.data.startswith("approve_"))
async def approve_payment(callback: CallbackQuery, db: Database):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        full_data = callback.data.replace("approve_", "")
        user_id, duration = full_data.split("_", 1)  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        user_id = int(user_id)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–Ω—è–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        days_mapping = {
            "1_day": 1,
            "7_days": 7,
            "30_days": 30
        }
        
        days = days_mapping.get(duration)
        if not days:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        db.add_subscription(user_id, days, duration)
        
        await callback.bot.send_message(
            user_id,
            "‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ {format_subscription_type(duration)} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞."
        )
        
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã")

@router.callback_query(F.data.startswith("reject_"))
async def reject_payment(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.bot.send_message(
        user_id,
        "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    )
    
    await callback.message.edit_text(
        f"‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    )
